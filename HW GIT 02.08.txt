1.Как отказаться от изменений в файле (файлах) находящийся в рабочем каталоге (work directory)?

можно использовать команду `git checkout`
git checkout файл
если нужно отказаться от изменений в нескольких файлах, указываем их имена чередующимися пробелами:
git checkout файл1 файл2 файл3
После выполнения этой команды изменения во всех указанных файлах будут отменены.

2.Как вернуть файл из индекса в рабочий каталог?

Чтобы вернуть файл используем команду `git reset`
git reset файл
Чтобы вернуть все файлы из индекса, выполните:
git reset
После выполнения этой команды, файлы будут удалены из индекса и вернутся в рабочий каталог, при этом сохраняя изменения, которые были внесены в них.
Чтобы вернуть файлы только из определенной директории, указываем путь к этой директории перед именем файла:
git reset путь/к/директории/файл

3.Как отменить ошибочный commit ?

можно использовать команды git reset или git revert, в зависимости от ситуации.

Использование git reset: 
-если нужно удалить коммит и все изменения, связанные с ним, из истории. 

Использование git revert:
-если нужно "отменить" коммит, создав новый коммит, который убирает изменения, внесенные этим коммитом, используйте git revert. Этот метод безопаснее, потому что он не меняет историю коммитов, а создает новый коммит, который отменяет эффекты предыдущего.

4.Как исправить commit отправленный на сервер GitHub?

Исправление коммита, который уже был отправлен на сервер GitHub, может повлиять на историю репозитория, и нужно быть осторожным при выполнении таких действий, но если нам нужно внести изменения в последний коммит или в предыдущие коммиты, вы можете воспользоваться командами `git commit --amend` и `git push --force`
-если нам нужно внести изменения в последний коммит:

   вносим необходимые изменения в вашей рабочей директории.
   используем команду `git add`, чтобы добавить изменения в индекс
      git add измененные-файлы
    
   затем используем команду `git commit --amend`, чтобы исправить последний коммит:
      git commit --amend
   эта команда открывавем редактор для редактирования сообщения коммита, а также добавит новые изменения к последнему коммиту.

-перезапись истории на сервере GitHub:

   после исправления коммита, если мы хотим перезаписать историю на сервере GitHub, выполняем команду с опцией `--force`:
   git push --force origin ваша-ветка
 `--force` может быть опасным, если другие люди работают с тем же репозиторием.

5.Как создать новую ветку и переключится в нее?

Можно использовать команду `git checkout -b`
Для этого:
-открываем терминал и переходим в наш локальный Git-репозиторий с помощью команды `cd`, если мы еще не находимся внутри него.
-создаем новую ветку и переключитесь на нее с помощью команды `git checkout -b`:
   git checkout -b название-новой-ветки
-чтобы создать и переключиться на новую ветку с именем "feature-branch", выполните следующую команду:
   git checkout -b feature-branch
-теперь можно вносить изменения, делать коммиты и работать с этой веткой

Для переключения между ветками нужно выполнить команду `git checkout` с именем целевой ветки:
   git checkout имя-целевой-ветки

6. Как создать git репозиторий из локального каталога на своем комьютере. Как его отправить на github.com?

Начинаем с инициализация Git-репозитория локально:

-открываем терминал и переходим в каталог, который хотим превратить в Git-репозиторий с помощью команды cd. Например: cd /путь/к/вашему/каталогу
-затем выполняем команду git init, чтобы инициализировать новый Git-репозиторий в этом каталоге
Добавляем файлы в наш Git-репозиторий, используя команду git add для добавления файлов в индекс, и команду git commit для создания коммита:
git add .
git commit -m "Первый коммит"

Создаем репозитория на GitHub:

-переходим на GitHub (https://github.com)
-выбираем"New repository" (Новый репозиторий)
-заполняем информацию о репозитории. После заполнения всех необходимых полей, нажимаем "Create repository"

Связывание локального репозитория с удаленным на GitHub:

-нужно будет выполнить команды, но с нашими данными:
git remote add origin https://github.com/ваш-пользователь/ваш-репозиторий.git
git branch -M main
git push -u origin main
Эти команды добавляют удаленный репозиторий на GitHub как origin, затем переименовывают нашу текущую ветку в main и отправляют коммиты на GitHub.


7. Как получить на локальный компьютер изменения с github.com

Если еще нет локальной копии репозитория с GitHub, нужно клонировать его с GitHub на свой компьютер с помощью команды git clone. Эта команда создаст локальную копию репозитория на компьютере.
Если уже есть локальная копия репозитория и нужно получить последние изменения с GitHub, переходим в каталог репозитория с помощью команды cd и выполните команду git pull. Эта команда извлечет последние изменения из удаленной ветки (обычно origin/master или origin/main) на GitHub и обновит вашу локальную копию. Теперь у нас есть актуальная версия репозитория с GitHub на локальном компьютере. Мы можем выполнять изменения, коммитить их и, при необходимости, отправлять обратно на GitHub с помощью команды git push.

8. Какую информацию нам дают команда :

git status - Эта команда показывает текущее состояние рабочего каталога и индекса (стейджа). Она показывает, какие файлы были изменены, добавлены или удалены, и если какие-то файлы не были застейжены для следующего коммита, она также указывает это.

git log - Эта команда отображает историю коммитов в локальном репозитории. Можно увидеть список коммитов с информацией, такой как автор, дата и время коммита, и сообщение коммита. Можно использовать различные параметры, чтобы настроить формат и отображение этого журнала.

git remote -v - Эта команда показывает список удаленных репозиториев, связанных с локальным репозиторием. Она показываетт URL-адреса удаленных репозиториев, которые можно использовать для синхронизации данных.

git branch -v - Эта команда отображает список локальных веток и их последних коммитов. Она покажет, какие ветки существуют в локальном репозитории и какой коммит находится на каждой из них.